# %%
import pandas as pd
import numpy as np

# %%
# PV Capacity = 30MW each
data_csv   = pd.read_csv('ny_data.csv', index_col=0)
data = []
for i in range(len(data_csv.columns)):
    data += [np.array(data_csv[str(i)])]
    
# %%
# Data Preprocessing
# 8760 = 365*24

site_select = [0,1,2,3] #list(range(67))
data_select = data[site_select[0]]
for i in range(1, len(site_select)):
    data_select = data_select + data[site_select[i]]
data_select = data_select/len(site_select)

train_len = int(8760*0.6)
val_len   = int(8760*0.2)
test_len  = 8760 - train_len - val_len

data_train0 = []
data_train  = []
for i in range(train_len):
    data_train0 += [data_select[i]]
    data_train  += [data_train0[i]] if data_train0[i] > 0 else []

data_val0 = []
data_val  = []
for i in range(val_len):
    data_val0 += [data_select[train_len+i]]
    data_val  += [data_val0[i]] if data_val0[i] > 0 else []

data_test0 = []
data_test  = []
for i in range(test_len):
    data_test0 += [data_select[train_len+val_len+i]]
    data_test  += [data_test0[i]] if data_test0[i] > 0 else []

# %%
# AutoRegressive (AR)

past = 5

size_train = len(data_train)
size_val   = len(data_val)
size_test  = len(data_test)

train_input = np.zeros((size_train-past, past))
train_output = np.zeros((size_train-past, 1))
for i in range(size_train-past):
    train_input[i,:] = np.reshape(data_train[i:i+past], (past))
    train_output[i,:] = data_train[i+past]

val_input = np.zeros((size_val-past, past))
val_output = np.zeros((size_val-past, 1))
for i in range(size_val-past):
    val_input[i,:] = np.reshape(data_val[i:i+past], (past))
    val_output[i,:] = data_val[i+past]

test_input = np.zeros((size_test-past, past))
test_output = np.zeros((size_test-past, 1))
for i in range(size_test-past):
    test_input[i,:] = np.reshape(data_test[i:i+past], (past))
    test_output[i,:] = data_test[i+past]

weight = np.matmul(np.linalg.pinv(train_input), train_output)
val_predict  = np.matmul(val_input, weight)
test_predict = np.matmul(test_input, weight)
MAE_val  = np.mean(np.abs(val_predict - val_output))
MAE_test = np.mean(np.abs(test_predict - test_output))
print("Real Error: MAE_val: {}MW, MAE_test: {}MW".format(round(30*len(site_select)*MAE_val,2),round(30*len(site_select)*MAE_test,2)))
print("Per Error: MAE_val: {}%, MAE_test: {}%".format(round(100*MAE_val,2),round(100*MAE_test,2)))
